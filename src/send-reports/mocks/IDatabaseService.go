// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "jucabet/stori-challenge/send-reports/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// IDatabaseService is an autogenerated mock type for the IDatabaseService type
type IDatabaseService struct {
	mock.Mock
}

// GetContacts provides a mock function with given fields:
func (_m *IDatabaseService) GetContacts() ([]*entities.Contact, error) {
	ret := _m.Called()

	var r0 []*entities.Contact
	if rf, ok := ret.Get(0).(func() []*entities.Contact); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByFileChargeID provides a mock function with given fields: fileChargeID
func (_m *IDatabaseService) GetTransactionsByFileChargeID(fileChargeID string) ([]*entities.Transaction, error) {
	ret := _m.Called(fileChargeID)

	var r0 []*entities.Transaction
	if rf, ok := ret.Get(0).(func(string) []*entities.Transaction); ok {
		r0 = rf(fileChargeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileChargeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIDatabaseService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIDatabaseService creates a new instance of IDatabaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIDatabaseService(t mockConstructorTestingTNewIDatabaseService) *IDatabaseService {
	mock := &IDatabaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
