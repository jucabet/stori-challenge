// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	dtos "jucabet/stori-challenge/process-transactions/internal/domain/dtos"
	enums "jucabet/stori-challenge/process-transactions/internal/domain/enums"

	mock "github.com/stretchr/testify/mock"
)

// IStorageService is an autogenerated mock type for the IStorageService type
type IStorageService struct {
	mock.Mock
}

// GetFileContentByName provides a mock function with given fields: folder, name
func (_m *IStorageService) GetFileContentByName(folder enums.StorageFolders, name string) ([]*dtos.TransactionsFileInfoDto, error) {
	ret := _m.Called(folder, name)

	var r0 []*dtos.TransactionsFileInfoDto
	if rf, ok := ret.Get(0).(func(enums.StorageFolders, string) []*dtos.TransactionsFileInfoDto); ok {
		r0 = rf(folder, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dtos.TransactionsFileInfoDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(enums.StorageFolders, string) error); ok {
		r1 = rf(folder, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilesByFolder provides a mock function with given fields: _a0
func (_m *IStorageService) GetFilesByFolder(_a0 enums.StorageFolders) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(enums.StorageFolders) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(enums.StorageFolders) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIStorageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStorageService creates a new instance of IStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStorageService(t mockConstructorTestingTNewIStorageService) *IStorageService {
	mock := &IStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
